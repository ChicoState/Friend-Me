//functions revolving around meetup times
import 'package:flutter/material.dart';
import '../auth/user.dart'; 
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';


//Function to respond to a meetup (acccept/decline/etc.).  sends UID, id (meetup id), and userresponse to back end
Future<http.Response> RespondToMeetUp(String? UserResponse, String? UID. int id) async
{
  var url = Uri(
    scheme: 'http',
    host: '127.0.0.1',
    port: 8000,
    path: 'meetups',
    //queryParameters: {'UID' : '$UID'}, //own user id as query string.
  );
  http.Response response = await http.post(
    url,
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
      'Authorization': '$UID',
    },
    body: jsonEncode(<String, String>{
      'UID': "$UID",
      'id': "$id"
      'response': "$UserResponse",
    }),
  );
  if (response.statusCode != 200){
    return response; 
  }
  return response; 
}


Future<http.Response> FetchMeetUps() async
{
  final UID = await getUsername(); 
  var url = Uri(
    scheme: 'http',
    host: '127.0.0.1',
    port: 8000,
    path: 'meetups',
    //queryParameters: {'UID' : '$UID'}, //own user id as query string.
  );
  http.Response response = await http.get(
    url,
    headers: {
      'Authorization': '$UID',
    },
  );
  if (response.statusCode != 200){
    return response; 
  }
  Iterable list = json.decode(response.body);
  //List<HTTPUser> users =
  return response; 
}

//pass the http response from FetchMeetups to this function to return a list of meetups
List<MeetUp> ListMeetUps(http.Response response){
  Iterable list = json.decode(response.body);
  List<MeetUp> MeetUps =List<MeetUp>.from(list.map((model) => MeetUp.fromJson(model)));
  return MeetUps;
}

//class meetup assuming the back end can return the username of the other friend who's time matches up, and the start/end dates (datetime) of the matching time. 
class MeetUp{
  //variables: final <type> <name>
  final int id;  //MeetUp id.  used for put/post to agree or cancel a MeetUp. 
  final String user1; //name of first user in the meetup
  final String user2; //name of the second user in the meetup
  final String status;  //status of the meet up
  final DateTime start_time; 
  final DateTime end_time; 
  // constructor (required this.<name>)
  MeetUp(
    {required this.id,
    required this.user1,
    required this.user2, 
    required this.status,
    required this.start_time,
    required this.end_time}
  );
  factory MeetUp.fromJson(Map<String, dynamic> json) {
    return MeetUp(
      id: json['id'] as int,
      user1: json['user1'] as String,
      user2: json['user2'] as String,
      status: json['status'] as String,
      start_time: DateTime.parse(json['start_time'].toString()),
      end_time: DateTime.parse(['end_time'].toString()),
    );
  }
  //no map to json, MeetUps should only be created on back end in theory
}

